PSP-Specific Yabause Documentation
==================================

Important notice
----------------
PSP support for Yabause is still in an experimental stage; please be aware
that some things may not work well (or at all).

Unlike Yabause 0.9.10, this version of Yabause now works on all PSPs,
including the original PSP-1000 ("Phat").  However, some games may run
more slowly on PSP Phats because of the limited amount of memory available
for caching dynamically-translated program code.


Installing from a binary distribution
-------------------------------------
The yabause-X.Y.Z.zip archive contains a "PSP" directory (folder); copy
this into the root directory of your Memory Stick.  (On Windows, for
example, your Memory Stick might show up as the drive F: -- in this case,
drag the "PSP" folder from the ZIP archive onto the "F:" drive icon in
Windows Explorer.)

The "PSP" directory contains a directory called "GAME", which in turn
contains a directory called "YABAUSE".  Inside the "YABAUSE" directory is
a single file named "EBOOT.PBP"--this is the Yabause program file which the
PSP runs, like a Windows .EXE file.  You'll also need to copy your CD image
and other data files to this directory on your Memory Stick (see below).

Once you've copied Yabause to your Memory Stick, skip to "How to use
Yabause" below.


Installing from source
----------------------
To build Yabause for PSP from the source code, you'll need a recent (at
least SVN r2450(*)) copy of the unofficial PSP SDK from http://ps2dev.org,
along with the toolchain from the same site.  Ensure the PSP toolchain
(psp-gcc) and tools (psp-prxgen, etc.) are in your $PATH, then configure
Yabause with:

    ./configure --host=psp [options...]

(*) Note that the PSP SDK headers and libraries are, at least through
    r2452, missing some functions required by Yabause.  If you get errors
    about the functions sceKernelIcacheInvalidateAll or
    sceKernelIcacheInvalidateRange, apply the patch found in
    src/psp/icache-funcs-2450.patch to the PSP SDK source, recompile and
    reinstall it, then rebuild Yabause.

You can ignore the warning about the --build option that appears when you
start the configure script.  You may also see a warning about "using cross
tools not prefixed with host triplet"; you can usually ignore this as well,
but if you get strange build errors related to libraries like SDL or
OpenGL, try disabling the optional libraries with the options
"--without-sdl" and "--without-opengl".

The following options can be used when configuring for PSP:

    --with-q68  (STRONGLY RECOMMENDED)
        Enables the Q68 interpreter/translator for 68000 code.  Q68 is a
        dynamic-translation-capable replacement for the C68K interpreter
        included in Yabause, designed specifically for the PSP.

    --without-c68k  (STRONGLY RECOMMENDED)
        Disables the C68K interpreter for 68000 code.  If Q68 is used
        instead, C68K can be disabled to save around 1.5MB of memory.

    --enable-psp-debug
        Enables printing of debug messages to standard error.

    --enable-psp-profile
        Enables printing of profiling statistics to standard error.
        By default, statistics are output every 100 frames; edit
        src/psp/psp-per.c to change this.  Note that profiling has a
        significant impact on emulation speed.

After the configure script completes, run "make" to build Yabause.  The
build process will create an EBOOT.PBP file in the src/psp/ subdirectory;
create a directory for Yabause under /PSP/GAME on your memory stick (e.g.
/PSP/GAME/YABAUSE) and copy EBOOT.PBP there.


How to use Yabause (PSP-specific notes)
---------------------------------------
All files you intend to use with Yabause (BIOS images, CD images, backup
RAM images) must be stored in the same directory as the EBOOT.PBP file
mentioned above.  The default filenames used by Yabause are as follows:

    BIOS.BIN   -- BIOS image
    CD.ISO     -- CD image (can also be a *.CUE file)
    BACKUP.BIN -- Backup RAM image (will be created if it does not exist)

Pressing the Select button after starting up Yabause will bring up a menu
allowing you to choose other files; see below for details.  If you do not
already have a backup RAM image, just leave the backup RAM filename at its
default setting, and the file will be created the first time backup RAM is
saved.

The directional pad and analog stick can both be used to emulate the
Saturn controller's directional pad.  The default button controls are as
follows:

    Start -- Start
      A   -- Cross
      B   -- Circle
      C   -- (unassigned)
      X   -- Square
      Y   -- Triangle
      Z   -- (unassigned)
      L   -- L
      R   -- R

Button controls can be changed via the configuration menu.


The PSP configuration menu
--------------------------
When you first run Yabause, the PSP configuration menu will be displayed,
allowing you to choose the CD image you want to run and configure other
Yabause options.  You can also press Select while the emulator is running
to bring up the menu; the emulator will remain paused while you have the
menu open.

The main menu contains six options:

   * "Configure general options..."

     This opens a submenu with the following options:

        * "Start emulator immediately"

          Causes the emulator to start immediately when you run Yabause,
          instead of showing the configuration menu.

        * "Select BIOS/CD/backup files..."

          This opens a submenu which allows you to select the files
          containing the BIOS image, CD image, and backup data you want
          to use.  Selecting one of the three options will open a file
          selector, allowing you to choose any file in the Yabause
          directory on your Memory Stick.

          Note that changing any of the files will reset the emulator.

        * "Auto-save backup RAM"

          When enabled, automatically saves the contents of backup RAM to
          your Memory Stick whenever you save your game in the emulator.
          The emulator will display "Backup RAM saved." on the screen for
          a short time when an autosave occurs.  Note that the emulator
          may pause for a fraction of a second while autosaving.

          If you disable this option, be aware that backup RAM is _not_
          saved to the Memory Stick when you quit Yabause; you need to
          manually save it using the "Save backup RAM now" option when
          appropriate.

        * "Save backup RAM now"

          Immediately saves the contents of backup RAM to your Memory
          Stick.  If you have auto-save disabled, you should use this
          option to save backup RAM before quitting Yabause.

   * "Configure controller buttons..."

     This opens a submenu which allows you to configure which PSP button
     corresponds to which button on the emulated Saturn controller.
     Pressing one of the Circle, Cross, Triangle, or Square buttons on
     the PSP will assign that button to the currently selected Saturn
     controller button.  The PSP's Start, L, and R buttons are always
     assigned to the same-named buttons on the Saturn controller, and
     cannot be changed.

     Since both the Circle and Cross buttons are used for button
     assignment, the Start button is used to return to the main menu.

   * "Configure video options..."

     This opens a submenu with the following options:

        * "Use hardware video renderer" / "Use software video renderer"

          These options allow you to choose between the PSP-specific
          hardware renderer and the default software renderer built into
          Yabause for displaying Saturn graphics.  The hardware renderer
          is significantly faster, and for simple 2-D graphcs can run at
          a full 60fps without frame skipping (if the game program itself
          can be emulated quickly enough); however, a number of more
          complex graphics features are not supported, so if a game does
          not display correctly, try using the software renderer instead.

          The selected renderer can be changed while the emulator is
          running without disturbing your game in progress.  However,
          changing the renderer may cause the screen to momentarily
          blank out.

        * "Configure hardware rendering settings..."

          This option opens another submenu which allows you to change
          certain aspects of the hardware video renderer's behavior,
          including smoothing (antialiasing) of graphics.

        * "Configure frame-skip settings..."

          This option opens another submenu which allows you to configure
          the hardware renderer's frame-skip behavior (frame skipping is
          not supported by the software renderer).  Full automatic frame
          skipping is not yet implemented, but you can select options to
          adjust the manual frame skip setting based on what kind of
          graphics are being displayed.

        * "Show FPS"

          When enabled, the emulator's current frames per second (FPS)
          will be displayed in the upper-left corner of the screen as
          "FPS: X.XX (Y.YY)".  The number "X.XX" is the average frame
          rate, calculated from the last few seconds of emulation, while
          the number "Y.YY" is the instantaneous frame rate, i.e., the
          reciprocal of the time it took to display the last frame.

   * "Configure advanced settings..."

     This opens a submenu with the following options:

        * "Use SH-2 recompiler (fast)" / "Use SH-2 interpreter (slow)"

          These options allow you to choose between the default SH-2 core,
          which recompiles Saturn SH-2 code into native MIPS code for the
          PSP, and the SH-2 interpreter built into Yabause.  The SH-2
          interpreter is much slower, often an order of magnitude or more
          slower, so there is generally no reason to use it unless you
          suspect a bug in the recompiler.

          Note that changing the SH-2 core will reset the emulator.  As
          with the "Reset emulator" option on the main menu, you must hold
          L and R while selecting either of these options to avoid an
          accidental reset.

        * "Select SH-2 optimizations..."

          This option opens up another submenu which allows you to turn on
          or off certain optimizations used by the SH-2 recompiler.  These
          are shortcuts taken by the recompiler to allow games to run more
          quickly, but in rare cases they can cause games to misbehave or
          even crash.  If a game doesn't work correctly, turning one or
          more of these options off may fix it.

          These options can be changed while the emulator is running
          without disturbing your game in progress.  However, changing them
          causes the emulator to clear out any recompiled code it has in
          memory, so the game may run slowly for a short time after exiting
          the menu as the emulator recompiles SH-2 code using the new
          options.

        * "Use more precise emulation timing"

          When enabled, the emulator will keep the various parts of the
          emulated Saturn hardware more precisely in sync with each other.
          This carries a noticeable speed penalty, but some games may
          require this more precise timing to work correctly.

        * "Sync audio output to emulation"

          When enabled, the emulator will synchronize audio output with
          the rest of the emulation.  In general, this improves audio/video
          synchronization but causes more frequent audio dropouts (or
          "popping") when the emulator runs more slowly than real time.
          However, the exact effect of this option can vary:

             - When disabled, the audio can get ahead of the video if the
               emulator is running slowly; this can be seen, for example,
               in the Saturn BIOS startup animation.  On the other hand,
               game code that uses the audio output speed for timing (such
               as the movie player in Panzer Dragoon Saga) can actually run
               faster with synchronization disabled.  MIDI-style background
               music will also play more smoothly, though of course the
               music tempo will slow down depending on the emulation speed.

             - When enabled, the audio output will match the output of a
               real Saturn much more closely.  In particular, this option
               is needed to avoid popping in streamed audio such as Red
               Book audio tracks when the emulator runs at full speed
               (60fps).  On the flip side, the audio will momentarily drop
               out (as described above) whenever the emulator takes more
               than 1/60th of a second to process an emulated frame.

        * "Sync Saturn clock to emulation"

          When enabled, the Saturn's internal clock is synchronized with
          the emulation, rather than following real time regardless of
          emulation speed.  If the emulator is running slow, for example,
          this option will slow the Saturn's clock down to match the speed
          at which the emulator is running.

        * "Always start from 1998-01-01 12:00"

          When enabled, the Saturn's internal clock will always be
          initialized to 12:00 noon on January 1, 1998, rather than the
          current time when the emulator starts.  When used with the clock
          sync option above, this is useful in debugging because it ensures
          a consistent environment each time the emulator is started.
          Outside of debugging, however, there is usually no reason to
          enable this option.

   * "Save options"

     Save the current settings, so Yabause will use them automatically the
     next time you start it up.

   * "Reset emulator"

     Reset the emulator, as though you had pressed the Saturn's RESET
     button.  To avoid accidentally resetting the emulator, you must hold
     the PSP's L and R buttons while selecting this option.

Pressing Select on any menu screen will exit the menu and return to the
Saturn emulation.


Troubleshooting
---------------
Q: "My game runs too slowly!"

A: C'est la vie.  The PSP is unfortunately just not powerful enough to
   emulate the Saturn at full speed (see "Technical notes" below for the
   gory details).  Here are some things you can do to improve the speed of
   the emulator:

      * Make sure you are using the hardware video renderer (in the
        "Configure video options" menu) and the SH-2 recompiler (in the
        "Configure advanced settings" menu).

      * Under "Configure video options" / "Configure hardware rendering"
        settings", turn off "Enable rotated/distorted graphics".  A single
        distorted background can take the equivalent of 2-3 full 60fps
        frames to render on the PSP.

      * Under "Configure video options" / "Configure frame-skip settings",
        set the frame-skip mode to manual and increase the number of frames
        to skip.  (Many games only run at 30 frames per second, so using a
        frame-skip count of 1 won't actually make a visible difference
        compared to a count of 0.)

      * Under "Configure advanced emulation options" / "Select SH-2
        optimizations", make sure all optimizations are enabled.

      * Under "Configure advanced emulation options", if "Use more precise
        emulation timing" is disabled, try enabling it.  (This may cause
        the game to freeze or crash, however.)

Q: "My game suddenly froze!"

A: Try pressing Select to open the Yabause menu.

      * If the menu doesn't open, then either you've hit a bug in Yabause,
        or the SH-2 optimizer has caused the program to misbehave.  Restart
        Yabause, then go to the "Configure advanced emulation options" /
        "Select SH-2 optimizations" and disable all of the options there.
        If that fixes the problem, you can then try turning the options on
        one by one to find the one that caused the crash (you may need to
        repeat whatever actions you performed in the game in order to
        determine whether the crash occurs or not), and disable only that
        option to keep the emulator running as fast as possible.

      * If the menu does option, then one likely cause is a timing issue;
        this can be seen, for example, when starting Dead or Alive with the
        "Use more precise emulation timing" option disabled.  Try enabling
        this option under the "Configure advanced emulation options" menu
        and resetting the emulator to see if it fixes the problem.

   In either of the above cases, it's also possible that the game itself
   has a bug.  Look in FAQs or other online resources and see if any
   similar problems have been reported.


Technical notes
---------------
The Saturn, like the PSOne, is only one step down in power from the PSP
itself, so full-speed emulation is a fairly difficult proposition from the
outset.  To make matters worse, the Saturn's architecture is about as
different from the PSP as two modern computer architectures can be:
different primary CPUs (SH-2 versus MIPS Allegrex), big-endian byte order
(Saturn) versus little-endian (PSP), tile-based graphics (Saturn) versus
texture-based graphics (PSP), and so on.  As such, Yabause must take a
number of shortcuts to make games even somewhat playable.

Emulation of the Saturn's two SH-2 CPUs in particular is problematic.
These processors run at either 26 or 28 MHz, and they use a RISC-like
instruction set in which most instructions execute in one clock cycle, so
in a worst-case scenario Yabause would need to process 56 million SH-2
instructions per second--on top of sound, video, and other hardware
emulation--to maintain full speed.  But the PSP's Allegrex CPU(*) runs at
a maximum of 333MHz, meaning that the SH-2 emulator must be able to
execute each instruction (including accessing the register file, swapping
byte order in memory accesses, updating the SH-2 clock cycle counter, and
so on) within at most 6 native clock cycles for full-speed emulation.  In
fact, the demands of emulating the other Saturn hardware reduce this to
something closer to 2-3 native clock cycles.

(*) The PSP actually has a second CPU, the Media Engine, which is not
    currently used by Yabause.  But even if the ME were put to use, the
    general issues described here would still apply.

With these limitations, interpreted execution of SH-2 code is out of the
question--merely looking up the instruction handler would exhaust the
instruction's quota of execution time.  For this reason, the PSP port uses
a dynamic translator to convert blocks of SH-2 code into blocks of native
MIPS code.  When the emulator encounters a block of SH-2 code for the first
time, it scans through the block, generating equivalent native code for the
block which is then executed directly on the native CPU.  This naturally
causes the emulator to pause for a short time when it encounters a lot of
new code at once, such as when loading a new part of a game from CD; this
is the price that must be paid for the speed of native code execution.

Even with this dynamic translation, however, there are still a number of
hurdles to fast emulation.  For example:

* Every time the end of a code block is reached, the emulator must look up
  the next block to execute.  This lookup consumes precious cycles which do
  not directly correspond to SH-2 instruction emulation (around 35 cycles
  per lookup in the current version).

  In order to streamline code translation and increase the optimizability
  of individual blocks, the dynamic translator tends to choose minimally-
  sized blocks for translation.  Tests showed that this was an improvement
  over an older algorithm that used larger blocks, but the resulting
  overhead of block lookups imposes a limit on execution speed for certain
  types of code, particularly algorithms which rely heavily on subroutine
  calls.

  At the other end of the spectrum, one might consider modifying a true
  compiler like GCC to accept SH-2 instructions as input, then running
  each code block through the compiler itself to generate native code.
  This could undoubtedly produce efficient output with larger blocks, but
  it would also impose significant additional overhead when translating.

* The SH-2 is unable to load arbitrary constants into registers, instead
  using PC-relative accesses to load values outside the range of a MOV #imm
  instruction from memory.  However, Saturn programs also use PC-relative
  accesses for function-local static variables, meaning that there is no
  general way to tell whether a given value is actually a constant or
  merely a variable that may be modified elsewhere.

  This presents a particular problem in optimizing memory accesses, since
  if a pointer loaded from a PC-relative address is not known to be
  constant, the translated code must incur the overhead of checking the
  pointer's value every time the block is executed.  The SH-2 core includes
  an optional optimization, SH2_OPTIMIZE_LOCAL_POINTERS, which takes the
  stance that all such pointers either are constant or will always point
  within the same memory region (high system RAM, VDP2 RAM, etc.).  This
  optimization shows a marked improvement in execution speed in some cases,
  but any code which violates the assumption above will cause the emulator
  to crash.

* Some games make use of self-modifying code, presumably in an attempt to
  increase execution speed; one example can be found in the "light ray"
  animation used in Panzer Dragoon Saga when obtaining an item.  Naturally,
  the use of self-modifying code has a severe impact on execution time in a
  dynamic translation environment, as each modification requires every
  block containing the modified instruction to be retranslated.  (A similar
  effect can be seen on modern x86-family CPUs, which internally translate
  x86 instructions to native micro-ops for execution; self-modifying code
  can slow down the processor by an order of magnitude or more.)

  The SH-2 core attempts to detect frequently modified instructions and
  pass them directly to the interpreter to avoid the overhead of repeated
  translation, but there is unfortunately no true solution to the problem
  other than rewriting the relevant part of the game program itself.

* Memory accesses are difficult to implement efficiently; in fact, the SH-2
  emulator devotes over 1,000 lines of source code to handling load and
  store operations, independently of the memory access handlers in the
  Yabause core.  The current implementation is able to handle accesses to
  true RAM fairly quickly, but any access which falls back to the default
  MappedMemory*() handlers incurs a significant access penalty (typically
  20-30 cycles plus any handling needed for the specific address).

  This is most obvious while loading data from the emulated CD, since the
  game program must access a hardware register in a loop while waiting for
  the CD data to be loaded, and additionally some games read CD data
  directly out of the CD data register rather than using DMA to load the
  data into memory.  Currently, the only way to speed up such code blocks
  is through handwritten translation (see OPTIMIZE_HAND_TUNED_CASES in
  src/psp/sh2-optimize.c).

Patches to either speed up specific games or to improve the translation
algorithm generally are of course welcome.
