AC_INIT(yabause, 0.9.4)

AC_CANONICAL_HOST
AC_CANONICAL_TARGET

AM_INIT_AUTOMAKE([1.8.0])

AC_PROG_RANLIB

AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL

AC_LANG(C)

AC_C_BIGENDIAN

AM_PROG_CC_C_O

#################################################################################
#										#
# phase 1, we're checking for things that could be used by Yabause library	#
#										#
#################################################################################

# checking for mini18n
AC_CHECK_LIB(mini18n, mini18n)

# checking for variadic macros
AC_MSG_CHECKING([[whether the compiled supports c99 variadic macros]])
AC_COMPILE_IFELSE(AC_LANG_PROGRAM([[#define MACRO(...) puts(__VA_ARGS__)]], [[MACRO("foo");]]),
	AC_DEFINE(HAVE_C99_VARIADIC_MACROS)
	AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

# checking for SDL (can be used for sound and input)
use_sdl=yes
AC_ARG_WITH(sdl, AC_HELP_STRING(--without-sdl, don't use SDL), [use_sdl=$withval])

if test x$use_sdl = xyes ; then
	case $host in
		*darwin*)
			OLDLDFLAGS="$LDFLAGS"
			LDFLAGS="$LDFLAGS -framework SDL"
			AC_LINK_IFELSE([AC_LANG_PROGRAM([[
			int t(void) { return 0; }
			]],[[
			int foo = t();
			]])],[AC_DEFINE(HAVE_LIBSDL)
			SDL_LIBS="-framework SDL"], [])
			LDFLAGS="$OLDLDFLAGS"
			;;
		*)
			YAB_CHECK_HOST_TOOLS(HAVE_LIBSDL, [sdl-config sdl11-config])

			if test ! x$HAVE_LIBSDL = x ; then
				SDL_CFLAGS=`$HAVE_LIBSDL --cflags`
				SDL_LIBS=`$HAVE_LIBSDL --libs`
				AC_DEFINE(HAVE_LIBSDL)
			fi
			;;
	esac

	CFLAGS="$CFLAGS $SDL_CFLAGS"
	LIBS="$LIBS $SDL_LIBS"
fi

# checking for OpenGL (most ports needs it for video)
use_opengl=yes
AC_ARG_WITH(opengl, AC_HELP_STRING(--without-opengl, don't use OpenGL), [use_opengl=$withval])

if test x$use_opengl = xyes ; then
	case $host in
		*darwin*)
			LIBS="$LIBS -framework Opengl"
			AC_DEFINE(HAVE_LIBGL)
			;;
		*cygwin* | *mingw32*)
			YAB_LIBS="$YAB_LIBS -lopengl32 -lglut32"
			AC_DEFINE(HAVE_LIBGL)
			;;
		*linux* | *bsd*)
			AC_PATH_XTRA
			LIBS="$LIBS $X_LIBS"
			CFLAGS="$CFLAGS $X_CFLAGS"

			AC_CHECK_LIB(GL, glEnable, [
				LIBS="$LIBS -lGL"
				AC_DEFINE(HAVE_LIBGL)
				],, $LIBS)
			AC_CHECK_LIB(glut, glutGetModifiers,[
				LIBS="$LIBS -lglut"
				AC_DEFINE(HAVE_LIBGLUT)],, $LIBS)
			;;
		*)
			AC_CHECK_LIB(GL, glEnable, [
				LIBS="$LIBS -lGL"
				AC_DEFINE(HAVE_LIBGL)
				],, $LIBS)
			AC_CHECK_LIB(glut, glutGetModifiers,[
				LIBS="$LIBS -lglut"
				AC_DEFINE(HAVE_LIBGLUT)],, $LIBS)
			;;
	esac
fi

# platform-specific features
case $host in
	*darwin*)
		LIBS="$LIBS -framework IOKit"
		yabause_arch=macosx
		major=`expr $host_os : "darwin\(@<:@^.@:>@*\)"` 	 
		if test $major -ge 7 ; then
			CFLAGS="$CFLAGS -mmacosx-version-min=10.3 -isysroot /Developer/SDKs/MacOSX10.5.sdk -arch i386 -arch ppc"
			LDFLAGS="$LDFLAGS -Wl,-syslibroot,/Developer/SDKs/MacOSX10.5.sdk -Wl,-macosx_version_min,10.3 -arch i386 -arch ppc"
			AC_DEFINE(MAC_OS_X_VERSION_MAX_ALLOWED, MAC_OS_X_VERSION_10_3)
		fi
		;;
	*linux*) yabause_arch=linux;;
	*cygwin*)
		yabause_arch=windows
                AC_DEFINE(_WIN32_IE, 0x0400)
		;;
	*mingw32*)
		AC_CHECK_HEADERS("wnaspi32.h", [], [], [#include <windows.h>])
		yabause_arch=windows
                AC_DEFINE(_WIN32_IE, 0x0400)
		;;
	*freebsd*) yabause_arch=freebsd;;
	*netbsd* | *openbsd*) yabause_arch=netbsd;;
	*) yabause_arch=".";;
esac
AC_SUBST(yabause_arch)

# users can turn c68k compilation off
compile_c68k=yes
AC_ARG_WITH(c68k, AC_HELP_STRING(--without-c68k, don't compile C68k), [compile_c68k=$withval])
if test x$compile_c68k = xyes ; then
	AC_DEFINE(HAVE_C68K)
fi
AM_CONDITIONAL(COMPILE_C68K, test x$compile_c68k = xyes)

#################################################################################
#										#
# phase 2, we're done with Yabause library, now we're tring to configure ports	#
#										#
#################################################################################

# qt
AC_PATH_PROGS(HAVE_QMAKE, [qmake-qt4 qmake])

if test ! x$HAVE_QMAKE = x ; then
	yabause_available_yuis="qt $yabause_available_yuis"
fi

# gtk
YAB_CHECK_HOST_TOOLS(HAVE_PKG, [pkg-config])

if test ! x$HAVE_PKG = x ; then
	if `$HAVE_PKG gtkglext-1.0` && test "x$use_opengl = xyes" ; then
		yabause_available_yuis="gtk $yabause_available_yuis"
		YUI_gtk_CFLAGS=`$HAVE_PKG gtkglext-1.0 --cflags`
		YUI_gtk_LIBS=`$HAVE_PKG gtkglext-1.0 --libs`
	else
		if `$HAVE_PKG gtk+-2.0` ; then
			yabause_available_yuis="gtk $yabause_available_yuis"
			YUI_gtk_CFLAGS=`$HAVE_PKG gtk+-2.0 --cflags`
			YUI_gtk_LIBS=`$HAVE_PKG gtk+-2.0 --libs`
		fi
	fi
fi

# carbon
OLDLDFLAGS="$LDFLAGS"
LDFLAGS="$LDFLAGS -framework Carbon"
AC_LINK_IFELSE([AC_LANG_PROGRAM([[
	int t(void) { return 0; }
        ]],[[
        int foo = t();
        ]])],[YUI_carbon_LIBS="-framework Carbon -framework AGL"
		yabause_available_yuis="carbon $yabause_available_yuis"], [])
LDFLAGS="$OLDLDFLAGS"

# windows
YAB_CHECK_HOST_TOOLS(WINDRES, [windres])
AC_CHECK_HEADER([windows.h], [yabause_available_yuis="windows $yabause_available_yuis"], [])

# adding . as a fallback when no other port is available
yabause_available_yuis="$yabause_available_yuis ."

yabause_yui=`echo $yabause_available_yuis | cut -d\  -f1`

AC_ARG_WITH([port], AC_HELP_STRING(--with-port, choose your port), [yabause_manual_yui=$withval])
for yabause_available_yui in $yabause_available_yuis; do
	if test x$yabause_available_yui = x$yabause_manual_yui; then
		yabause_yui=$yabause_manual_yui
	fi
done

if ! test "x$yabause_yui" = "x." ; then
	eval YAB_CFLAGS=\$YUI_${yabause_yui}_CFLAGS
	eval YAB_LIBS=\$YUI_${yabause_yui}_LIBS
	AC_SUBST(YAB_CFLAGS)
	AC_SUBST(YAB_LIBS)
fi

AC_SUBST(yabause_yui)

AC_ARG_ENABLE(debug, AC_HELP_STRING(--enable-debug, enable general debug information) , AC_DEFINE(DEBUG))
AC_ARG_ENABLE(vdp1-debug, AC_HELP_STRING(--enable-vdp1-debug, enable vdp1 debug information) , AC_DEFINE(VDP1_DEBUG))
AC_ARG_ENABLE(vdp2-debug, AC_HELP_STRING(--enable-vdp2-debug, enable vdp2 debug information) , AC_DEFINE(VDP2_DEBUG))
AC_ARG_ENABLE(cd-debug, AC_HELP_STRING(--enable-cd-debug, enable cdblock debug information) , AC_DEFINE(CDDEBUG))
AC_ARG_ENABLE(smpc-debug, AC_HELP_STRING(--enable-smpc-debug, enable smpc debug information) , AC_DEFINE(SMPC_DEBUG))
AC_ARG_ENABLE(scsp-debug, AC_HELP_STRING(--enable-scsp-debug, enable scsp debug information) , AC_DEFINE(SCSP_DEBUG))
AC_ARG_ENABLE(newperinterface, AC_HELP_STRING(--enable-newperinterface, use new controls interface) , AC_DEFINE(USENEWPERINTERFACE))

AC_CONFIG_FILES([Makefile
	doc/Makefile
	src/Makefile
	src/carbon/Makefile
	src/dreamcast/Makefile
	src/gtk/Makefile
	src/qt/Makefile
	src/qt/yabause.pro
	src/windows/Makefile
	autopackage/default.apspec
])
if test x$yabause_yui = xqt ; then
	AC_CONFIG_FILES([src/qt/Makefile.qmake:src/qt/yabause.pro], [$QMAKE src/qt/yabause.pro -o src/qt/Makefile.qmake], [QMAKE=$HAVE_QMAKE])
fi

AC_CONFIG_COMMANDS([src/c68k/Makefile], [cd src/c68k/ && $CONFIG_SHELL ./configure])

AM_CONDITIONAL([YUI_IS_CARBON], [test ${yabause_yui} = "carbon"])
AM_CONDITIONAL([YUI_IS_DREAMCAST], [test ${yabause_yui} = "dreamcast"])
AM_CONDITIONAL([YUI_IS_GTK], [test ${yabause_yui} = "gtk"])
AM_CONDITIONAL([YUI_IS_QT], [test ${yabause_yui} = "qt"])
AM_CONDITIONAL([YUI_IS_WINDOWS], [test ${yabause_yui} = "windows"])

AM_CONDITIONAL([ARCH_IS_FREEBSD], [test ${yabause_arch} = "freebsd"])
AM_CONDITIONAL([ARCH_IS_LINUX], [test ${yabause_arch} = "linux"])
AM_CONDITIONAL([ARCH_IS_MACOSX], [test ${yabause_arch} = "macosx"])
AM_CONDITIONAL([ARCH_IS_NETBSD], [test ${yabause_arch} = "netbsd"])
AM_CONDITIONAL([ARCH_IS_WINDOWS], [test ${yabause_arch} = "windows"])
AC_OUTPUT

echo "=================="
echo "configure report"
echo
echo "available ports: $yabause_available_yuis"
echo "selected port:   $yabause_yui"
echo "=================="
