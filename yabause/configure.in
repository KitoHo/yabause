AC_INIT(src/yabause.cc)

AC_CANONICAL_HOST
AC_CANONICAL_TARGET

case $target in
	*darwin*) yabause_arch=macosx;;
	*linux*) yabause_arch=linux;;
esac
AC_SUBST(yabause_arch)

AM_INIT_AUTOMAKE(yabause, 0.0.6)

AC_PROG_CC
AC_PROG_CXX
AC_PROG_INSTALL

AC_LANG_CPLUSPLUS

AC_C_BIGENDIAN

AC_CHECK_LIB(curses, initscr)

AC_CHECK_TOOL(HAVE_LIBSDL, sdl-config)

if test x$HAVE_LIBSDL = x ; then
	AC_MSG_ERROR([You need SDL])
else
	SDL_CXXFLAGS=`$HAVE_LIBSDL --cflags`
	SDL_LIBS=`$HAVE_LIBSDL --libs`
fi

CXXFLAGS="$CXXFLAGS $SDL_CXXFLAGS"
LIBS="$LIBS $SDL_LIBS"
case $target in
	*darwin*) LIBS="$LIBS $SDL_LIBS -framework IOKit -framework CoreFoundation";;
esac

AC_CHECK_LIB(SDL_image, IMG_Load)

AC_CHECK_LIB(GL, glEnable)

dnl Usage: YAB_CXX_STL_LEFT_RIGHT : checks whether the C++ compiler
dnl   supports left and right functions
AC_DEFUN(YAB_CXX_STL_LEFT_RIGHT,[
AC_CACHE_CHECK(for left and right in STL streams,yab_cv_left_right,
 [AC_TRY_COMPILE([
#include <iostream>
],[
 std::cout << std::left;
],yab_cv_left_right=yes,yab_cv_left_right=no)
])
if test $yab_cv_left_right = yes ; then
AC_DEFINE(STL_LEFT_RIGHT, 1,
[Define if you have left and right functions in your STL streams])
fi])

YAB_CXX_STL_LEFT_RIGHT

AC_ARG_ENABLE(debug, , AC_DEFINE(DEBUG))

AC_OUTPUT(Makefile \
	  src/Makefile \
	  doc/Makefile \
	 )
